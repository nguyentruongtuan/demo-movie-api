openapi: 3.0.3
info:
  title: Formula1 system 
  version: 1.0.0
  contact:
    email: denny.truongnguyen@gmail.com
servers:
  - url: http://localhost:3000/api


paths:
  /teams:
    get:
      tags:
        - team
      summary: Get all team entities
      responses:
        '200':
          description: successfull
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post: 
      tags:
        - team 
      summary: Create team entity 
      requestBody:
        description: Create a new team entity
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        '201':
          description: created
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Team'
  /teams/{id}:
    get:
      tags:
        - team
      summary: Get a team
      description: get a team
      parameters:
        - name: id
          in: path
          description: team id to get
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid team value
        '200':
          description: Get team
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Team'
    
    delete:
      tags:
        - team
      summary: Deletes a team
      description: delete a team
      parameters:
        - name: id
          in: path
          description: team id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid team value
        '204':
          description: No content
    
    put:
      tags:
        - team
      summary: Update a team
      description: update a team
      parameters:
        - name: id
          in: path
          description: team id to delete
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new team entity
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/TeamRequest'      
      responses:
        '400':
          description: Invalid team value
        '200':
          description: updated
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Team'



components:
  schemas:
    TeamRequest: 
      type: object
      properties:
        fullTeamName: 
          type: string
        base: 
          type: string
        teamChief: 
          type: string
        technicalChief: 
          type: string
        chassis: 
          type: string
        powerUnit: 
          type: string
        firstTeamEntry: 
          type: string
        worldChampionships: 
          type: number
        highestRaceFinish: 
          type: string
        polePositions: 
          type: number
        fastestLaps: 
          type: number
        shortName: 
          type: string
    Team:
      allOf: 
      - $ref: '#/components/schemas/TeamRequest'
      - type: object
        required:
        - id
        properties:
          id:
            type: string
    DriverRequest:
      type: object
      properties:
        name: 
          type: string
        biography: 
          type: string
        team: 
          type: string
        country: 
          type: string
        podiums: 
          type: number
        points: 
          type: number
        grandsPrixEntered: 
          type: number
        worldChampionships: 
          type: string
        highestRaceFinish: 
          type: string
        highestGridPosition: 
          type: string
        dateOfBirth: 
          type: string
        placeOfBirth: 
          type: string
    Driver:
      allOf: 
      - $ref: '#/components/schemas/DriverRequest'
      - type: object
        required:
        - id
        properties:
          id:
            type: string
    EventRequest:
      type: object
      properties:
          title: 
            type: string
          pos: 
            type: number
          no: 
            type: string
          driver: 
            type: string
          car: 
            type: string
          lap: 
            type: number
          timeRetired: 
            type: number
    Event:
      allOf: 
      - $ref: '#/components/schemas/EventRequest'
      - type: object
        required:
        - id
        properties:
          id:
            type: string
    RaceRequest:
      type: object
      properties:
        startDate: 
          type: string
        endDate: 
          type: string
        status: 
          type: string
        raceEvent: 
          type: string
    Race:
      allOf: 
      - $ref: '#/components/schemas/RaceRequest'
      - type: object
        required:
        - id
        properties:
          id:
            type: string
    RaceResultRequest:
      type: object
      properties:
        title: 
          type: string
        pos: 
          type: number
        no: 
          type: string
        driver: 
          type: string
        car: 
          type: string
        lap: 
          type: number
        timeRetired: 
          type: number
    RaceResult:
      allOf: 
      - $ref: '#/components/schemas/RaceResultRequest'
      - type: object
        required:
        - id
        properties:
          id:
            type: string
  securitySchemes:
    jwt_token:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  

security: 
  - jwt_token: []