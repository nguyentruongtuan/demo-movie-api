openapi: 3.0.3
info:
  title: Demo Movie API 
  version: 1.0.0
  contact:
    email: denny.truongnguyen@gmail.com
servers:
  - url: http://localhost:8000/api


paths:
  /movies:
    get:
      tags:
        - movie
      summary: Get all movie entities
      parameters:
        - in: query 
          name: limit
          schema:  
            type: integer
          description: Limit number 
        - in: query 
          name: offset
          schema:
            type: integer
          description: Offset number 
        - in: query 
          name: genres
          schema:
            type: array
            items:
              type: number
        - in: query 
          name: year
          schema:
            type: array
            items:
              type: number
      responses:
        '200':
          description: successfull
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
    post: 
      tags:
        - movie 
      summary: Create movie entity 
      requestBody:
        description: Create a new movie entity
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '201':
          description: created
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Movie'
  /movies/{id}:
    get:
      tags:
        - movie
      summary: Get a movie
      description: get a movie
      parameters:
        - name: id
          in: path
          description: movie id to get
          required: true
          schema:
            type: number
      responses:
        '400':
          description: Invalid movie value
        '200':
          description: Get movie
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Movie'
    
    delete:
      tags:
        - movie
      summary: Deletes a movie
      description: delete a movie
      parameters:
        - name: id
          in: path
          description: movie id to delete
          required: true
          schema:
            type: number
      responses:
        '400':
          description: Invalid movie value
        '204':
          description: No content
    
    put:
      tags:
        - movie
      summary: Update a movie
      description: update a movie
      parameters:
        - name: id
          in: path
          description: movie id to delete
          required: true
          schema:
            type: number
      requestBody:
        description: Create a new movie entity
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/MovieRequest'      
      responses:
        '400':
          description: Invalid movie value
        '200':
          description: updated
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Movie'


  /genres:
    get:
      tags:
        - genre
      summary: Get all genre entities
      parameters:
        - in: query 
          name: limit
          schema:  
            type: integer
          description: Limit number 
        - in: query 
          name: offset
          schema:
            type: integer
          description: Offset number 
      responses:
        '200':
          description: successfull
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
  /genres/{id}:
    get:
      tags:
        - genre
      summary: Get a genre
      description: get a genre
      parameters:
        - name: id
          in: path
          description: genre id to get
          required: true
          schema:
            type: number
      responses:
        '400':
          description: Invalid genre value
        '200':
          description: Get genre
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Genre'
   


components:
  schemas:
    MovieRequest: 
      type: object
      properties:
        title: 
          type: string
        genre: 
          type: array
          items:
            type: number
          description: genre ids 
        year: 
          type: number
    Movie:
      allOf: 
      - $ref: '#/components/schemas/MovieRequest'
      - type: object
        required:
        - id
        properties:
          id:
            type: number
    GenreRequest: 
      type: object
      properties:
        name: 
          type: string
    Genre:
      allOf: 
      - $ref: '#/components/schemas/GenreRequest'
      - type: object
        required:
        - id
        properties:
          id:
            type: number
  securitySchemes:
    jwt_token:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  

security: 
  - jwt_token: []